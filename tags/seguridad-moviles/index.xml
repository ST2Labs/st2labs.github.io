<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seguridad Moviles on Seguridad para Todos</title>
    <link>https://st2labs.github.io/tags/seguridad-moviles/</link>
    <description>Recent content in Seguridad Moviles on Seguridad para Todos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@seguridadparatodos.es (Julian J Gonzalez)</managingEditor>
    <webMaster>info@seguridadparatodos.es (Julian J Gonzalez)</webMaster>
    <lastBuildDate>Wed, 02 Dec 2015 18:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://st2labs.github.io/tags/seguridad-moviles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Digital Forensics of Android WhatsApp SQLite Database (Part II)</title>
      <link>https://st2labs.github.io/post/2015-12-02-digital-forensics-of-android-whatsapp-sqlite-database-part-ii/</link>
      <pubDate>Wed, 02 Dec 2015 18:00:00 +0100</pubDate>
      <author>info@seguridadparatodos.es (Julian J Gonzalez)</author>
      <guid>https://st2labs.github.io/post/2015-12-02-digital-forensics-of-android-whatsapp-sqlite-database-part-ii/</guid>
      <description>En esta segunda parte, se procederá a recuperar **un mensaje que ha sido
eliminado** en la base de datos SQLite de la aplicación WhatsApp y se
analizará la información obtenida para determinar cuando se envío el
mensaje (timestamp) recuperado.
Estructura de SQLite (II)
Una vez que conocemos el esquema de la base de datos, y como se organiza
la información útil (payload data) dentro de las celdas de cada una de</description>
    </item>
    
    <item>
      <title>Digital Forensics of Android WhatsApp SQLite Database (Part I)</title>
      <link>https://st2labs.github.io/post/2015-11-26-digital-forensics-of-android-whatsapp-sqlite-database-part-i/</link>
      <pubDate>Thu, 26 Nov 2015 18:00:00 +0100</pubDate>
      <author>info@seguridadparatodos.es (Julian J Gonzalez)</author>
      <guid>https://st2labs.github.io/post/2015-11-26-digital-forensics-of-android-whatsapp-sqlite-database-part-i/</guid>
      <description>Hace poco me he tenido que enfrentar al análisis forense de la
aplicación Whatsapp en Android, y la sorpresa es la limitada información
que existe al respecto. Whatsapp no tiene una API pública, y no sólo
eso, sino que persigue claramente a quién tras aplicar ingeniería
inversa publica información al respecto, me estoy refiriendo sobretodo a
la información del protocolo interno de la aplicación.
Antecedentes
Independientemente de la información existente, mi reto no era descifrar</description>
    </item>
    
    <item>
      <title>Android IMSI-Catcher-Detector AIMSICD</title>
      <link>https://st2labs.github.io/post/2014-10-23-android-imsi-catcher-detector-aimsicd/</link>
      <pubDate>Thu, 23 Oct 2014 18:16:00 +0200</pubDate>
      <author>info@seguridadparatodos.es (Julian J Gonzalez)</author>
      <guid>https://st2labs.github.io/post/2014-10-23-android-imsi-catcher-detector-aimsicd/</guid>
      <description>Las vulnerabilidad en el protocolo GSM/3G no es algo novedoso (véase mi
articulo
al respecto), todos sabemos que cuando no disponemos de cobertura H+/4G,
la estación base y el móvil negocian conectarse mediante 2G/GSM/GPRS
para no quedarte sin cobertura.
Uno de los ataques que esta cogiendo popularidad es utilizar falsa
estaciones base (fake BTS) para capturar el IMSI de los terminales
móviles en el radio de acción en el que actúa.</description>
    </item>
    
  </channel>
</rss>